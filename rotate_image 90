import java.util.*;
class Main{
    public static void main(String[] args){===============>s.c=0(n*m)  ===t.c=0(n^2)
        int[][] arr={{1,2,3,4},
                     {5,6,7,8},
                     {9,10,11,12},
                     {13,14,15,16}};
        int n=arr.length;
        int[][] ans=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<arr[i].length;j++){
                ans[j][n-i-1]=arr[i][j];
                
            }
        }
       for(int[] a:ans){
           for(int ele:a){
               System.out.print(ele+" ");
           }
           System.out.println();
       }
       
    }
}============================>
=============================================optimise by inplace like first transpose than reverse
import java.util.*;
class Main{
    public static void main(String[] args){==========>s.c=0(1)
        int[][] arr={{1,2,3,4},
                     {5,6,7,8},
                     {9,10,11,12},
                     {13,14,15,16}};
        int n=arr.length;
       
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
               int temp=arr[i][j];
               arr[i][j]=arr[j][i];
               arr[j][i]=temp;
                
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n/2;j++){
                int temp=arr[i][j];
                arr[i][j]=arr[i][n-j-1];
                arr[i][n-j-1]=temp;
            }
        }
                
      for(int[] a:arr){
          for(int ele:a){
              System.out.print(ele+" ");
          }
          System.out.println();
      }
    }
  
}===================================
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 ===OUTPUT
