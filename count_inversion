######There is an integer array ‘A’ of size ‘N’.
Number of inversions in an array can be defined as the number of pairs of ‘i’, ‘j’ such that ‘i’ < ‘j’ and ‘A[i]’ > ‘A[j]’.
You must return the number of inversions in the array.
For example,
Input:
A = [5, 3, 2, 1, 4], N = 5
Output:
7
Explanation: 
The pairs satisfying the condition for inversion are (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), and (3, 4). 
The number of inversions in the array is 7.
==========================================================================
import java.util.*;
public class Solution {
    public static int numberOfInversions(int []a, int n) {
        // Write your code here.
        return mergesort(a,0,n-1);
    }
    public static int mergesort(int[] a,int low,int high){
        int cnt=0;
        if(low>=high){
            return cnt;
        }
        int mid=(low+high)/2;
        cnt+=mergesort(a,low,mid);
        cnt+=mergesort(a,mid+1,high);
        cnt+=merge(a,low,mid,high);
        return cnt;
    }
    public static int merge(int[] a,int low,int mid,int high){
        int cnt=0;
        ArrayList<Integer> temp=new ArrayList<>();
        int left=low;
        int right=mid+1;
        while(left<=mid && right<=high){
            if(a[left]<=a[right]){
                temp.add(a[left]);
                left++;
            }
            else{
                temp.add(a[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        while(left<=mid){
            
                temp.add(a[left]);
                left++;
            
        }
        while(right<=high){
                temp.add(a[right]);
                right++;
            
        }
        for(int i=low;i<=high;i++){
            a[i]=temp.get(i-low);
        } 
        return cnt;   
    }
}
